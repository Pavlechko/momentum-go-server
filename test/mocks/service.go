// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\Serhii.Pavlechko\Documents\sigma\internship\projects\momentum-go-server\internal\services\common.go
//
// Generated by this command:
//
//	mockgen.exe -source=C:\Users\Serhii.Pavlechko\Documents\sigma\internship\projects\momentum-go-server\internal\services\common.go -destination=test/mocks/service .go -package=mocksg
//
// Package mock_services is a generated GoMock package.
package mocks

import (
	models "momentum-go-server/internal/models"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIService is a mock of IService interface.
type MockIService struct {
	ctrl     *gomock.Controller
	recorder *MockIServiceMockRecorder
}

// MockIServiceMockRecorder is the mock recorder for MockIService.
type MockIServiceMockRecorder struct {
	mock *MockIService
}

// NewMockIService creates a new mock instance.
func NewMockIService(ctrl *gomock.Controller) *MockIService {
	mock := &MockIService{ctrl: ctrl}
	mock.recorder = &MockIServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIService) EXPECT() *MockIServiceMockRecorder {
	return m.recorder
}

// BackgroundUpdate mocks base method.
func (m *MockIService) BackgroundUpdate(userID, source string) models.FrontendBackgroundImageResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BackgroundUpdate", userID, source)
	ret0, _ := ret[0].(models.FrontendBackgroundImageResponse)
	return ret0
}

// BackgroundUpdate indicates an expected call of BackgroundUpdate.
func (mr *MockIServiceMockRecorder) BackgroundUpdate(userID, source any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BackgroundUpdate", reflect.TypeOf((*MockIService)(nil).BackgroundUpdate), userID, source)
}

// CreateUser mocks base method.
func (m *MockIService) CreateUser(user models.UserInput) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockIServiceMockRecorder) CreateUser(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockIService)(nil).CreateUser), user)
}

// ExchangeUpdate mocks base method.
func (m *MockIService) ExchangeUpdate(userID, source, from, to string) models.ExchangeFrontendResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExchangeUpdate", userID, source, from, to)
	ret0, _ := ret[0].(models.ExchangeFrontendResponse)
	return ret0
}

// ExchangeUpdate indicates an expected call of ExchangeUpdate.
func (mr *MockIServiceMockRecorder) ExchangeUpdate(userID, source, from, to any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExchangeUpdate", reflect.TypeOf((*MockIService)(nil).ExchangeUpdate), userID, source, from, to)
}

// GetData mocks base method.
func (m *MockIService) GetData(userID string) models.ResponseObj {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetData", userID)
	ret0, _ := ret[0].(models.ResponseObj)
	return ret0
}

// GetData indicates an expected call of GetData.
func (mr *MockIServiceMockRecorder) GetData(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetData", reflect.TypeOf((*MockIService)(nil).GetData), userID)
}

// GetExchange mocks base method.
func (m *MockIService) GetExchange(userID string) models.ExchangeFrontendResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExchange", userID)
	ret0, _ := ret[0].(models.ExchangeFrontendResponse)
	return ret0
}

// GetExchange indicates an expected call of GetExchange.
func (mr *MockIServiceMockRecorder) GetExchange(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExchange", reflect.TypeOf((*MockIService)(nil).GetExchange), userID)
}

// GetNewExchange mocks base method.
func (m *MockIService) GetNewExchange(source, from, to string) models.ExchangeFrontendResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNewExchange", source, from, to)
	ret0, _ := ret[0].(models.ExchangeFrontendResponse)
	return ret0
}

// GetNewExchange indicates an expected call of GetNewExchange.
func (mr *MockIServiceMockRecorder) GetNewExchange(source, from, to any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewExchange", reflect.TypeOf((*MockIService)(nil).GetNewExchange), source, from, to)
}

// GetUser mocks base method.
func (m *MockIService) GetUser(user models.UserInput) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockIServiceMockRecorder) GetUser(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockIService)(nil).GetUser), user)
}

// MarketUpdate mocks base method.
func (m *MockIService) MarketUpdate(userID, symbol string) models.StockMarketResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarketUpdate", userID, symbol)
	ret0, _ := ret[0].(models.StockMarketResponse)
	return ret0
}

// MarketUpdate indicates an expected call of MarketUpdate.
func (mr *MockIServiceMockRecorder) MarketUpdate(userID, symbol any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarketUpdate", reflect.TypeOf((*MockIService)(nil).MarketUpdate), userID, symbol)
}

// QuoteUpdate mocks base method.
func (m *MockIService) QuoteUpdate(userID string) models.QuoteResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuoteUpdate", userID)
	ret0, _ := ret[0].(models.QuoteResponse)
	return ret0
}

// QuoteUpdate indicates an expected call of QuoteUpdate.
func (mr *MockIServiceMockRecorder) QuoteUpdate(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuoteUpdate", reflect.TypeOf((*MockIService)(nil).QuoteUpdate), userID)
}

// WeatherUpdate mocks base method.
func (m *MockIService) WeatherUpdate(userID, source, city string) models.FrontendWeatherResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WeatherUpdate", userID, source, city)
	ret0, _ := ret[0].(models.FrontendWeatherResponse)
	return ret0
}

// WeatherUpdate indicates an expected call of WeatherUpdate.
func (mr *MockIServiceMockRecorder) WeatherUpdate(userID, source, city any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WeatherUpdate", reflect.TypeOf((*MockIService)(nil).WeatherUpdate), userID, source, city)
}

// getLayerExchange mocks base method.
func (m *MockIService) GetLayerExchange(from, to string) models.ExchangeFrontendResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getLayerExchange", from, to)
	ret0, _ := ret[0].(models.ExchangeFrontendResponse)
	return ret0
}

// getLayerExchange indicates an expected call of getLayerExchange.
func (mr *MockIServiceMockRecorder) GetLayerExchange(from, to any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getLayerExchange", reflect.TypeOf((*MockIService)(nil).GetLayerExchange), from, to)
}

// getNBUExchange mocks base method.
func (m *MockIService) GetNBUExchange(symbol string) models.ExchangeFrontendResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNBUExchange", symbol)
	ret0, _ := ret[0].(models.ExchangeFrontendResponse)
	return ret0
}

// getNBUExchange indicates an expected call of getNBUExchange.
func (mr *MockIServiceMockRecorder) GetNBUExchange(symbol any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNBUExchange", reflect.TypeOf((*MockIService)(nil).GetNBUExchange), symbol)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\Serhii.Pavlechko\Documents\sigma\internship\projects\momentum-go-server\internal\store\store.go
//
// Generated by this command:
//
//	mockgen.exe -source=C:\Users\Serhii.Pavlechko\Documents\sigma\internship\projects\momentum-go-server\internal\store\store.go -destination=internal/mocks/store .go -package=mocksg
//
// Package mock_store is a generated GoMock package.
package mocks

import (
	models "momentum-go-server/internal/models"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockData is a mock of Data interface.
type MockData struct {
	ctrl     *gomock.Controller
	recorder *MockDataMockRecorder
}

// MockDataMockRecorder is the mock recorder for MockData.
type MockDataMockRecorder struct {
	mock *MockData
}

// NewMockData creates a new mock instance.
func NewMockData(ctrl *gomock.Controller) *MockData {
	mock := &MockData{ctrl: ctrl}
	mock.recorder = &MockDataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockData) EXPECT() *MockDataMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockData) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockDataMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockData)(nil).Close))
}

// CreateUser mocks base method.
func (m *MockData) CreateUser(user models.UserInput) (*models.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(*models.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockDataMockRecorder) CreateUser(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockData)(nil).CreateUser), user)
}

// GetSettingByName mocks base method.
func (m *MockData) GetSettingByName(id uuid.UUID, name models.SettingType) (models.Setting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSettingByName", id, name)
	ret0, _ := ret[0].(models.Setting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSettingByName indicates an expected call of GetSettingByName.
func (mr *MockDataMockRecorder) GetSettingByName(id, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSettingByName", reflect.TypeOf((*MockData)(nil).GetSettingByName), id, name)
}

// GetSettings mocks base method.
func (m *MockData) GetSettings(id uuid.UUID) models.SettingResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSettings", id)
	ret0, _ := ret[0].(models.SettingResponse)
	return ret0
}

// GetSettings indicates an expected call of GetSettings.
func (mr *MockDataMockRecorder) GetSettings(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSettings", reflect.TypeOf((*MockData)(nil).GetSettings), id)
}

// GetUser mocks base method.
func (m *MockData) GetUser(user models.UserInput) (*models.UserResponseWithHash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", user)
	ret0, _ := ret[0].(*models.UserResponseWithHash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockDataMockRecorder) GetUser(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockData)(nil).GetUser), user)
}

// UpdateSetting mocks base method.
func (m *MockData) UpdateSetting(id uuid.UUID, name models.SettingType, v map[string]string) (models.Setting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSetting", id, name, v)
	ret0, _ := ret[0].(models.Setting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSetting indicates an expected call of UpdateSetting.
func (mr *MockDataMockRecorder) UpdateSetting(id, name, v any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSetting", reflect.TypeOf((*MockData)(nil).UpdateSetting), id, name, v)
}
